#include "filipplib.h"


struct Button
    {
    int x, y;
    int lengh, hight;
    COLORREF setColor;//, fillColor;
    const char* text;
    //COLORREF setTextColor;
    int number;
    int hotKey;
    double (*grafic) (double x, const double kF []/*, int n*/);

    void drawButton ();
    };



void buildGrafics (HDC desk, HDC book);

int  controlGrafics (double kF []/*, int n*/);

void deskKF (const double kF [], int n);

void drawButtons       (Button object [], int size);

int  CheckButtons      (Button object[], int size  /*, int n*/);

int  CheckMouseButtons (Button object[], int size /*, int n*/);


int fIn (double xMin, double x, double xMax, double yMin, double y, double yMax);











int main ()
    {
    HDC desk = txLoadImage ("доска.BMP");
    HDC book = txLoadImage ("книга2.BMP");



    txCreateWindow (1350, 700);
    buildGrafics (desk, book);
    }

void buildGrafics (HDC desk, HDC book)
    {
    Button object [] = { {920, 40 , 250, 60, TX_WHITE,  "Liner",         0, '3', liner},
                         {920, 80,  250, 60, TX_WHITE,  "Parabola",      1, '4', parabola},
                         {920, 120, 250, 60, TX_WHITE,  "Parabola_3",    2, '5', parabola_3},
                         {920, 160, 250, 60, TX_WHITE,  "Parabola_4",    3, '6', parabola_4},
                         {920, 200, 250, 60, TX_WHITE,  "sinus",         4, '7', sinus},
                         {920, 240, 250, 60, TX_WHITE,  "cosinus",       5, '8', cosinus},
                         {920, 280, 250, 60, TX_WHITE,  "arc",           6, '9', arc},
                         {920, 320, 250, 60, TX_WHITE,  "big_arc",       7, '7', big_arc},
                         {920, 360, 250, 60, TX_WHITE,  "some_sin",      8, '7', some_sin},
                         {920, 400, 250, 60, TX_WHITE,  "some_sin",      9, '7', some_sin} };


    int size = sizeof (object) / sizeof (object [0]);


 //   if (GetAsyncKeyState (hotKey)) txdrawGrafics (-50, 50, parabola,   LIGHTGREEN, 0.1, 5, kF, n);






    const int n = 3;
    double kF [n] = {1, 1, 1};




    txBegin();


    int numberOfGrafic = 0;





    while (!GetAsyncKeyState ('Q'))
        {
        //if (GetAsyncKeyState ('3')) txdrawGrafics (-50, 50, parabola,   LIGHTGREEN, 0.1, 5, kF, n);

        //if (GetAsyncKeyState ('4')) txdrawGrafics (-50, 50, liner,      LIGHTGREEN, 0.1, 5, kF, n);



        int button          = CheckButtons   (object, size/*, n*/);
        int difference      = controlGrafics (kF/*, n*/);
        //int checkBook       = book();

        if (button != -1)
            {
            numberOfGrafic = button;
            }


        if (button != -1 || difference != 0)
            {
            //printf ("%d ",  button);
            txSetFillColor (TX_BLACK);
            txClear();

            const COLORREF veryGray = RGB (5, 5, 5);
            txSetFillColor (veryGray);


            txSetColor (veryGray);

                                   txGetExtent()

            txTransparentBlt (txDC(),  -42, -15, LenghDesk, HightDesk, desk);
            alphaBlend (0, 0, 1500, 748, desk, 0, 0, 1000, 499, 1);
            
            void alphaBlend (double x, double y, double width, double height,
                 HDC image, double xImage, double yImage, double widthOriginal, double heightOriginal, double alpha);

            txTransparentBlt (txDC(), 1240,  45, 55,    47, book);


            txRectangle (933, 0, 1500, 1000);

            drawButtons (object, sizeof (object) / sizeof (object [0]));
            deskKF (kF, n);


            txdrawGrafics (-50, 50, object [numberOfGrafic].grafic, WHITE, 0.1, 5, kF/*, n*/);
            }














        txSleep ();

        }


    txEnd();
    }


/*void multic ()
    {
    txBegin ();
    int t = 1;
    while (t <= 37)
        {
        txdrawGrafics (-50, 50, liner, CYAN, 0.05, 5, t,   1, 1);
        txdrawGrafics (-50, 50, liner, CYAN, 0.05, 5, t+4, 1, 1);
        txdrawGrafics (-50, 50, liner, CYAN, 0.05, 5, t+7, 1, 1);

        txSleep (48);


        txSetFillColor (TX_BLACK);
        //txClear();
        t++;
        }

    txdrawGrafics (-50, 50, liner, CYAN, 0.03, 5, 37, 1, 1);
    txdrawGrafics (-50, 50, liner, CYAN, 0.05, 5, 41, 1, 1);
    txdrawGrafics (-50, 50, liner, CYAN, 0.05, 5, 44, 1, 1);

    txEnd();

    txBegin ();
    t = 1;
    while (t <= 80)
        {
        txdrawGrafics (-50, 50, liner, CYAN, 0.03, 5, 37, 1, 1);
        txdrawGrafics (-50, 50, liner, CYAN, 0.05, 5, 41, 1, 1);
        txdrawGrafics (-50, 50, liner, CYAN, 0.05, 5, 44, 1, 1);

        txdrawGrafics (-50, 50, liner, LIGHTCYAN, 0.3, 5,  t-35 , 1, 1);
        txdrawGrafics (-50, 50, liner, LIGHTCYAN, 0.3, 5, -t+35 , 1, 1);

        txSleep (30);



        txSetFillColor (TX_BLACK);
        //txClear();
        t++;
        }

    txEnd();


    }

void multic2 ()

    txBegin ();
    int t = 1;
    while (t <= -50)
        {

        txdrawGrafics (-50, 50, liner, LIGHTCYAN, 0.3, 5,  t+10 , 1, 1);
        txdrawGrafics (-50, 50, liner, LIGHTCYAN, 0.3, 5, -t+80 , 1, 1);

        txSleep (30);


        txSetFillColor (TX_BLACK);
        txClear();
        t--;
        }

        txEnd();

    }

void multic3 ()
    {
    txBegin ();
    int t = 1;
    while (t <= 40)
        */

/* txdraw_Grafics (-50, 50, &Sin, LIGHTMAGENTA, 0.3, 5, -t , 1, 1);
        txdraw_Grafics (-50, 50, &Cos, LIGHTCYAN,    0.3, 5,  t , 1, 1);
        txdraw_Grafics (-50, 50, &Sin, ORANGE,       0.3, 5,  1 , t, 1);
        txdraw_Grafics (-50, 50, &Cos, LIGHTGREEN,   0.3, 5,  1 , -t, 1);

        txSleep (80);


        txSetFillColor (TX_BLACK);
        txClear();

        }


        txEnd();
        }


                                                                          */
/*void controlGrafics (double *controlK, double *controlB, double *controlC)
    {
    if (GetAsyncKeyState ('K'))
        {
        if (GetAsyncKeyState (VK_SHIFT))  (*controlK) -= 0.08;
        else                              (*controlK) += 0.08;
        if (GetAsyncKeyState (VK_CONTROL)) *controlK     = 1;
        }

    if (GetAsyncKeyState ('B'))
        {
        if (GetAsyncKeyState (VK_SHIFT))  (*controlB) -= 0.1;
        else                              (*controlB) += 0.1;
        if (GetAsyncKeyState (VK_CONTROL)) *controlB     = 1;

        }

    if (GetAsyncKeyState ('C'))
        {
        if (GetAsyncKeyState (VK_SHIFT))  (*controlC) -= 0.2;
        else                              (*controlC) += 0.2;
        if (GetAsyncKeyState (VK_CONTROL)) *controlC     = 1;
        }

    if (GetAsyncKeyState (VK_SPACE)) *controlK = 1, *controlB = 1, *controlC = 1;
    }*/

int  controlGrafics (double kF []/*, int n*/)
    {
    int difference = 0;

        if (GetAsyncKeyState('0'))
            {
            if (GetAsyncKeyState (VK_SHIFT))  (kF [0]) -= 0.08;
            else                              (kF [0]) += 0.08;
            if (GetAsyncKeyState (VK_CONTROL)) kF [0]      = 1;

            difference++;
            }

        if (GetAsyncKeyState ('1'))
            {
            if (GetAsyncKeyState (VK_SHIFT))  (kF [1]) -= 0.1;
            else                              (kF [1]) += 0.1;
            if (GetAsyncKeyState (VK_CONTROL)) kF [1]     = 1;

            difference++;
            }

        if (GetAsyncKeyState ('2'))
            {
            if (GetAsyncKeyState (VK_SHIFT))  (kF [2]) -= 0.2;
            else                              (kF [2]) += 0.2;
            if (GetAsyncKeyState (VK_CONTROL)) kF [2]     = 1;

            difference++;
            }




        if (GetAsyncKeyState (VK_SPACE)) kF [0] = 1, kF [1] = 1, kF [2] = 1, difference++;

        return difference;
    }




void deskKF (const double kF [], int n)
    {
    txSelectFont ("Comic Sans MS", 45);

    for (int i = 0; i < n; i++)
        {


        char str [100] = "";
        sprintf (str, "kF [%d] = " "%+.3lf", i, kF [i]);

        txSetColor (TX_WHITE);
        txTextOut (XofKF, YofKF + i * 35, str);
        }


    char str [100] = "";

    int i = n-1;
    while (i >= 0)
        {
        double kf = kF [i];
        if (fabs (kf) <= 0.01) kf = 0;

        #pragma GCC diagnostic ignored "-Wfloat-equal"

             if (kf ==  0)       sprintf (str, " ");



        else if (kf ==  1)
                {
                     if (i == 0)  sprintf (str, "+1");
                else if (i == 1)  sprintf (str, "+x");
                else if (i >= 2)  sprintf (str, "+x^%d", i);
                }

        else if (kf == -1)
                {
                     if (i == 0)  sprintf (str, "-1");
                else if (i == 1)  sprintf (str, "-x");
                else if (i >= 2)  sprintf (str, "-x^%d", i);
                }


        else if (kf < -1)
                {
                     if (i == 0)  sprintf (str, "%+lg",        kf);
                else if (i == 1)  sprintf (str, "%+lg * x",    kf);
                else if (i >= 2)  sprintf (str, "%+lg * x^%d", kf, i);
                }

        else if (kf > 1)
                {
                     if (i == 0)  sprintf (str, "%+lg",        kf);
                else if (i == 1)  sprintf (str, "%+lg * x",    kf);
                else if (i >= 2)  sprintf (str, "%lg * x^%d", kf, i);
                }

        else if (kf > 0)
                {
                if (kF [i] < 1)
                    {
                         if (i == 0)  sprintf (str, "%+lg",        kf);
                    else if (i == 1)  sprintf (str, "%+lg * x",    kf);
                    else if (i >= 2)  sprintf (str, "%+lg * x^%d", kf, i);
                    }
                }

        else if (kf < 0)
                {
                if (kF [i] > -1)
                    {
                         if (i == 0)  sprintf (str, "%+lg",        kf);
                    else if (i == 1)  sprintf (str, "%+lg * x",    kf);
                    else if (i >= 2)  sprintf (str, "%+lg * x^%d", kf, i);
                    }
                }

        #pragma GCC diagnostic warning "-Winline"




        txTextOut (XofSum - i * 100, YofSum, str);
        i--;
        }

    }


      //
      //          i == 0       i == 1       i >= 2
      //KF <  -1   "%+lg"    "%+lg * x"   "%+lg * x^%d" *
      //kF == -1    "-1"         "-x"        "-x^%d"    *
      //kF == 0     ""           ""             ""      *
      //kF == 1     "+1"         "+x"        "+x^%d"    *
      //kF >= 2    "%+lg"     "%+lg * x"   "%+lg * x^%d"
      ///////////////////////////////////////////////////

void Button::drawButton ()
    {
    txSetColor (setColor);
    txDrawText (x, y, x + lengh, y + hight, text);
    }

void drawButtons (Button object [], int size)
    {
    int i = 0;
    while (i < size)
        {
        object [i].drawButton ();
        i++;
        }
    }

int  CheckMouseButtons (Button object[], int size/*, int n*/)
    {
    if (!txMouseButtons() & 1) return -1;

    int i = 0;
    while (i < size)
        {
       // printf ("i = %d", i);

        double xMin = object [i].x, xMax = object [i].x + object [i].lengh;
        double yMin = object [i].y, yMax = object [i].y + object [i].hight;
        double x = txMousePos().x, y = txMousePos().y;

        if (fIn (xMin, x, xMax, yMin, y, yMax))
            {
            return i;
            //txdrawGrafics (-50, 50, object [i].grafic, LIGHTGREEN, 0.1, 5, kF, n);
            }
        i++;
        }
    return -1;

    }

int  CheckButtons (Button object[], int size/*, int n*/)
    {
    int i = 0;
    while (i < size)
        {
        RECT area = {object [i].x, object [i].y, object [i].x + object [i].lengh, object [i].y + object [i].hight};

        if (GetAsyncKeyState (object [i].hotKey) || (In (txMousePos(), area) && (txMouseButtons() & 1)))
            {
            return i;
            }
        i++;
        }

    return -1;

    }

int fIn (double xMin, double x, double xMax,
         double yMin, double y, double yMax)
    {
    return (xMin <= x && x <= xMax) &&
           (yMin <= y && y <= yMax);
    }

/*int in (struct button button, )
    {
    return (button.x <= point.x && point.x <= button.x + button.lengh) &&
           (button.y <= point.y && point.y <= button.y + button.hight);
    }*/

void book ()
    {
    /*double x = txMousePos().x, y = txMousePos().y;
    txTransparentBlt (txDC(), 1240,  45, 55,    47, book);

    if (fIn (1240, x, 1295, 45, y, 92))
            {
            return i;
            //txdrawGrafics (-50, 50, object [i].grafic, LIGHTGREEN, 0.1, 5, kF, n);
            }*/
    }























